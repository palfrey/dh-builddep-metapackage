#!/usr/bin/env python

import sys
import apt_pkg
from apt.progress.text import OpProgress
from debian_bundle.deb822 import Packages,Sources
from debian_bundle.changelog import Changelog
from os.path import exists,join
from os import makedirs,listdir,getenv,system
from shutil import copyfile
from optparse import OptionParser
from time import strftime, gmtime

template_dir = "template"
if not exists(template_dir):
	template_dir = "/usr/share/dh-builddep-metapackage/template/"

class InformativeOptionParser(OptionParser):
    def error(self, msg):
        """error(msg : string)

        Print a usage message incorporating 'msg' to stderr and exit.
        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        """
        from sys import stderr,exit
        stderr.write("%s: error: %s\n\n" % (self.get_prog_name(), msg))
        print >>stderr,self.format_help()
        exit(2)

parser = InformativeOptionParser(usage="%prog [options] <package name>", description="Builds build-dep metapackages in order to ease package management for package rebuilders")
parser.add_option("-o","--overwrite",dest="overwrite",default=False,action="store_true",help="Overwrite existing destination folder")
parser.add_option("-n","--name",dest="name",default=getenv("DEBFULLNAME","Default name"), help="Maintainer name (Default: %s)"%getenv("DEBFULLNAME","Default name"))
parser.add_option("-e","--email",dest="email",default=getenv("DEBEMAIL","fixme@invalid_email_path"),help="Maintainer email (Default: %s)"%getenv("DEBEMAIL","fixme@invalid_email_path"))
parser.add_option("-v","--version",dest="version",default=None,help="Use package with specific version (Default: Use highest priority version)")
parser.add_option("-b","--build",dest="build",default=False,action="store_true",help="Build the package with dpkg-buildpackage")
(opts,args) = parser.parse_args()

# base package that we use for build-depends calculation
if len(args) != 1:
	parser.error("need a package name as argument")

class SilentProgress(OpProgress):
    def update(self, percent=None):
		pass

sp = SilentProgress()

apt_pkg.init()
cache = apt_pkg.Cache(sp)
depcache = apt_pkg.DepCache(cache)
depcache.init()
records = apt_pkg.PackageRecords(cache)
srcrecords = apt_pkg.SourceRecords()

try:
	pkg = base = cache[args[0]]
except KeyError:
	parser.error("No package %s found" % args[0])

# get the build depends for the package itself
if opts.version != None:
	for ver in base.version_list:
		if ver.ver_str == opts.version:
			version = ver
			break
	else:
		version = None
else:
	version = depcache.get_candidate_ver(base)
if version:
	file, index = version.file_list.pop(0)
	records.lookup((file, index))
	if records.source_pkg != "":
		srcpkg_name = records.source_pkg
	else:
		srcpkg_name = pkg.name
else:
	srcpkg_name = None
if not srcpkg_name:
	if not opts.version or depcache.get_candidate_ver(base) == None:
		parser.error("Can't find source package for '%s'" % pkg.name)
	else:
		parser.error("Can't find version %s. Can find %s"%(opts.version,", ".join([ver.ver_str for ver in base.version_list])))

srcrec = srcrecords.lookup(srcpkg_name)

src = Sources()
src["Source"] = "%s-builddep"%pkg.name
src["Section"] = "devel"
src["Priority"] = "optional"
src["Maintainer"] = "%s <%s>"%(opts.name,opts.email)
src["Build-Depends"] = "debhelper (>= 4) "
src["Standards-Version"] = "3.6.2"

genpkg = Packages()
genpkg["Package"] = "%s-builddep"%pkg.name
genpkg["Architecture"] = version.arch

if srcrec:
	bd = srcrecords.build_depends
	for k in bd:
		assert k.find("Build-") == 0,k
		fieldname = "Depends"
		if k not in genpkg:
			genpkg[fieldname] = ""
		for depend in bd[k]:
			dep = ""
			for b in depend:
				if dep != "":
					dep += " | "
				dep += b[0]
				if b[1] !="":
					assert b[2]!="",b
					dep += " (%s %s)"%(b[2],b[1])
			if genpkg[fieldname] != "":
				genpkg[fieldname] += ", "
			genpkg[fieldname] += dep

genpkg["Description"] = "Build dependencies to make %s\n This is a metapackage depending on the packages needed to rebuild %s"%(pkg.name,pkg.name)

foldername = "%s-%s"%(pkg.name,version.ver_str)

if exists(foldername) and not opts.overwrite:
	print "Existing destination folder '%s'!"%foldername
	sys.exit(1)

dest = "%s/debian"%foldername
if not exists(dest):
	makedirs(dest)
for f in listdir(template_dir):
	copyfile(join(template_dir,f),join(dest,f))

control = open(join(dest,"control"),"w")

control.write(src.dump())
control.write("\n")
control.write(genpkg.dump())
control.close()

cl = Changelog()
cl.new_block()
cl.package = "%s-builddep"%pkg.name
cl.version = version.ver_str
cl.distributions = "other"
cl.urgency = 'low'
cl.add_change('  * Dummy changelog')
cl.author = src["Maintainer"]
cl.date = strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())

cl.write_to_open_file(open(join(dest,"changelog"),"w"))

if opts.build:
	system("cd %s; dpkg-buildpackage"%foldername)

